<?xml version="1.0" encoding="utf-8"?>
<!--<configuration>

	<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		autoReload="true" internalLogLevel="Trace" internalLogFile="${basedir}\logs\internallog.log" throwConfigExceptions="true">
		--><!-- enable asp.net core layout renderers --><!--
		<extensions>
			<add assembly="NLog.Extended"/>
		</extensions>

		<targets>
			--><!-- File Target for all log messages with basic details --><!--
			<target xsi:type="File" name="logfile" fileName="D:/TTMDotNetCore/nlog-${date:format=yyyy-MM-dd}.log"
				layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}" />
			--><!-- Other targets like console, database, etc. can be added here --><!--
		</targets>
		<rules>
			<logger name="*" minlevel="Debug" writeTo="logfile" />
			--><!-- Other rules can be added here --><!--
		</rules>
	</nlog>

</configuration>-->
<configuration>

	<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			  autoReload="true"
			  internalLogLevel="Info"
			  internalLogFile="${basedir}/logs/projectname.txt">

		<!-- enable asp.net core layout renderers -->
		<extensions>
			<add assembly="NLog.Web.AspNetCore"/>
		</extensions>

		<!-- the targets to write to -->
		<targets>

			<!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
			<target xsi:type="File" name="ownFile-web" fileName="${basedir}/logs/projectname${shortdate}.log"
					layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />

			<!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
			<target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />

			<!--Database Target with Script for creating the dbo.Log table.

			SET ANSI_NULLS ON
			SET QUOTED_IDENTIFIER ON
			CREATE TABLE [dbo].[Log] (
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[MachineName] [nvarchar](50) NOT NULL,
			[Logged] [datetime] NOT NULL,
			[Level] [nvarchar](50) NOT NULL,
			[Message] [nvarchar](max) NOT NULL,
			[Logger] [nvarchar](250) NULL,
			[Exception] [nvarchar](max) NULL,
			CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC)
			WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
			) ON [PRIMARY]-->

			<target name="database" xsi:type="Database" >
				<connectionString>Server=.;Database=ATM;User ID=sa;Password=sasa;TrustServerCertificate=True</connectionString>
				<commandText>
					insert into dbo.Log (
					MachineName, Logged, Level, Message,
					Logger, Exception
					) values (
					@MachineName, @Logged, @Level, @Message,
					@Logger, @Exception
					);
				</commandText>
				<parameter name="@MachineName" layout="${machinename}" />
				<parameter name="@Logged" layout="${date}" />
				<parameter name="@Level" layout="${level}" />
				<parameter name="@Message" layout="${message}" />
				<parameter name="@Logger" layout="${logger}" />
				<parameter name="@Exception" layout="${exception:tostring}" />
			</target>

		</targets>

		<!-- rules to map from logger name to target -->
		<rules>

			<!--Output hosting lifetime messages to console target for faster startup detection -->
			<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole, ownFile-web" final="true" />

			<!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
			<logger name="Microsoft.*" maxlevel="Info" final="true" />
			<logger name="System.Net.Http.*" maxlevel="Info" final="true" />

			<logger name="*" minlevel="Trace" writeTo="ownFile-web" />

			<logger name="*" minlevel="Debug" writeTo="database" />
		</rules>
	</nlog>
</configuration>